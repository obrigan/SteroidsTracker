import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { 
  MessageCircle, Bell, Share2, Calendar, 
  Target, Zap, Bot, Settings, Users, 
  Clock, TrendingUp
} from "lucide-react";
import { telegramWebApp } from "@/lib/telegramWebApp";
import { useToast } from "@/hooks/use-toast";

interface BotAction {
  id: string;
  title: string;
  description: string;
  icon: any;
  action: () => void;
  enabled: boolean;
  premium?: boolean;
}

interface TelegramBotActionsProps {
  userStats: {
    totalInjections: number;
    currentStreak: number;
    level: number;
  };
}

export function TelegramBotActions({ userStats }: TelegramBotActionsProps) {
  const { toast } = useToast();
  const [isConnected, setIsConnected] = useState(telegramWebApp.isTelegramWebApp());

  const botActions: BotAction[] = [
    {
      id: 'daily_reminder',
      title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
      description: '–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∏–Ω—ä–µ–∫—Ü–∏—è—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞—Ö',
      icon: Bell,
      enabled: true,
      action: () => setupDailyReminders()
    },
    {
      id: 'quick_log',
      title: '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å',
      description: '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—ä–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ —á–∞—Ç —Å –±–æ—Ç–æ–º',
      icon: MessageCircle,
      enabled: true,
      action: () => enableQuickLogging()
    },
    {
      id: 'progress_reports',
      title: '–û—Ç—á–µ—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
      description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ',
      icon: TrendingUp,
      enabled: true,
      action: () => setupProgressReports()
    },
    {
      id: 'group_challenges',
      title: '–ì—Ä—É–ø–ø–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏',
      description: '–£—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
      icon: Users,
      enabled: false,
      premium: true,
      action: () => joinGroupChallenges()
    },
    {
      id: 'ai_coach',
      title: '–ò–ò –¢—Ä–µ–Ω–µ—Ä',
      description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò',
      icon: Bot,
      enabled: false,
      premium: true,
      action: () => enableAICoach()
    },
    {
      id: 'share_achievements',
      title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏',
      description: '–î–µ–ª–∏—Ç–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º —Å –¥—Ä—É–∑—å—è–º–∏',
      icon: Share2,
      enabled: true,
      action: () => shareAchievements()
    }
  ];

  const setupDailyReminders = async () => {
    if (!isConnected) {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è Telegram",
        description: "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
        variant: "destructive"
      });
      return;
    }

    telegramWebApp.hapticImpact('light');
    
    const confirmed = await telegramWebApp.showConfirm(
      "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–Ω—ä–µ–∫—Ü–∏—è—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞—Ö."
    );

    if (confirmed) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Telegram
      await telegramWebApp.saveToCloud('daily_reminders', 'enabled');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      telegramWebApp.sendDataToBot({
        action: 'setup_reminders',
        userStats,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
      });

      telegramWebApp.hapticNotification('success');
      toast({
        title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        description: "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
      });
    }
  };

  const enableQuickLogging = async () => {
    if (!isConnected) return;

    telegramWebApp.hapticImpact('medium');
    
    await telegramWebApp.showAlert(
      "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ:\n\n" +
      "üíâ –¢–µ—Å—Ç 250–º–≥ –¥–µ–ª—å—Ç–∞\n" +
      "ü©∏ –°–¥–∞–ª –∞–Ω–∞–ª–∏–∑—ã\n" +
      "üì∏ –§–æ—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    await telegramWebApp.saveToCloud('quick_logging', 'enabled');
    
    telegramWebApp.sendDataToBot({
      action: 'enable_quick_logging',
      userId: telegramWebApp.getTelegramUser()?.id
    });
  };

  const setupProgressReports = async () => {
    if (!isConnected) return;

    telegramWebApp.hapticImpact('light');
    
    const confirmed = await telegramWebApp.showConfirm(
      "–ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ? –ë–æ—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
    );

    if (confirmed) {
      await telegramWebApp.saveToCloud('progress_reports', 'enabled');
      
      telegramWebApp.sendDataToBot({
        action: 'setup_progress_reports',
        frequency: 'weekly',
        userStats
      });

      telegramWebApp.hapticNotification('success');
      toast({
        title: "–û—Ç—á–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        description: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º"
      });
    }
  };

  const joinGroupChallenges = () => {
    telegramWebApp.hapticImpact('heavy');
    toast({
      title: "Premium —Ñ—É–Ω–∫—Ü–∏—è",
      description: "–ì—Ä—É–ø–ø–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Premium –≤–µ—Ä—Å–∏–∏",
      variant: "destructive"
    });
  };

  const enableAICoach = () => {
    telegramWebApp.hapticImpact('heavy');
    toast({
      title: "Premium —Ñ—É–Ω–∫—Ü–∏—è", 
      description: "–ò–ò —Ç—Ä–µ–Ω–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Premium –≤–µ—Ä—Å–∏–∏",
      variant: "destructive"
    });
  };

  const shareAchievements = async () => {
    if (!isConnected) return;

    telegramWebApp.hapticImpact('medium');
    
    const shareData = {
      action: 'share_achievement',
      achievement: {
        level: userStats.level,
        streak: userStats.currentStreak,
        injections: userStats.totalInjections
      }
    };

    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
    const message = `üí™ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ SteroidTracker:\n\n` +
      `üèÜ –£—Ä–æ–≤–µ–Ω—å: ${userStats.level}\n` +
      `üî• –°—Ç—Ä–∏–∫: ${userStats.currentStreak} –¥–Ω–µ–π\n` +
      `üíâ –ò–Ω—ä–µ–∫—Ü–∏–π: ${userStats.totalInjections}\n\n` +
      `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É —Ç—Ä–µ–∫–∏–Ω–≥—É! @SteroidTrackerBot`;

    telegramWebApp.sendDataToBot(shareData);
    
    toast({
      title: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
      description: "–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"
    });
  };

  return (
    <div className="space-y-4">
      <Card className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 border-blue-500/30">
        <CardHeader>
          <CardTitle className="text-white flex items-center">
            <Bot className="w-5 h-5 mr-2 text-blue-400" />
            Telegram Bot –§—É–Ω–∫—Ü–∏–∏
            {isConnected && (
              <Badge className="ml-2 bg-green-500/20 text-green-400 border-green-500/30">
                –ü–æ–¥–∫–ª—é—á–µ–Ω
              </Badge>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent>
          {!isConnected && (
            <div className="mb-4 p-3 bg-orange-500/10 border border-orange-500/30 rounded-lg">
              <p className="text-sm text-orange-300">
                –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ @SteroidTrackerBot
              </p>
            </div>
          )}
          
          <div className="grid grid-cols-1 gap-3">
            {botActions.map((action, index) => (
              <motion.div
                key={action.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card className={`cursor-pointer transition-all hover:scale-[1.02] ${
                  action.enabled 
                    ? 'bg-card-surface border-gray-700 hover:border-blue-500/50' 
                    : 'bg-gray-800/50 border-gray-700/50'
                }`}
                onClick={() => action.enabled && action.action()}>
                  <CardContent className="p-4">
                    <div className="flex items-center space-x-3">
                      <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                        action.enabled 
                          ? 'bg-blue-500/20 text-blue-400' 
                          : 'bg-gray-700/50 text-gray-500'
                      }`}>
                        <action.icon className="w-5 h-5" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center space-x-2">
                          <h4 className={`font-semibold ${
                            action.enabled ? 'text-white' : 'text-gray-400'
                          }`}>
                            {action.title}
                          </h4>
                          {action.premium && (
                            <Badge className="text-xs bg-yellow-500/20 text-yellow-400 border-yellow-500/30">
                              Premium
                            </Badge>
                          )}
                        </div>
                        <p className="text-sm text-gray-400 mt-1">
                          {action.description}
                        </p>
                      </div>
                      {action.enabled && (
                        <div className="text-blue-400">
                          <Zap className="w-4 h-4" />
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>

          {isConnected && (
            <div className="mt-6 p-4 bg-gradient-to-r from-green-900/20 to-blue-900/20 rounded-lg border border-green-500/30">
              <div className="flex items-center space-x-3">
                <Settings className="w-5 h-5 text-green-400" />
                <div>
                  <h4 className="font-semibold text-white">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞</h4>
                  <p className="text-sm text-gray-300">
                    –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Telegram Cloud Storage
                  </p>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}