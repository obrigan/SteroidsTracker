import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { 
  Share2, Users, Trophy, Camera, 
  Heart, MessageCircle, Copy, ExternalLink
} from "lucide-react";
import { telegramWebApp } from "@/lib/telegramWebApp";
import { useToast } from "@/hooks/use-toast";

interface ShareableContent {
  type: 'achievement' | 'progress' | 'milestone' | 'course_completion';
  title: string;
  description: string;
  stats: Record<string, number>;
  imageUrl?: string;
}

interface TelegramShareCardProps {
  content: ShareableContent;
  userStats: {
    level: number;
    totalInjections: number;
    currentStreak: number;
  };
}

export function TelegramShareCard({ content, userStats }: TelegramShareCardProps) {
  const { toast } = useToast();
  const [isSharing, setIsSharing] = useState(false);

  const generateShareText = () => {
    const emojis = {
      achievement: 'üèÜ',
      progress: 'üí™',
      milestone: 'üéØ',
      course_completion: '‚úÖ'
    };

    const emoji = emojis[content.type];
    
    let shareText = `${emoji} ${content.title}\n\n`;
    shareText += `${content.description}\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (content.stats) {
      Object.entries(content.stats).forEach(([key, value]) => {
        const statEmoji = getStatEmoji(key);
        shareText += `${statEmoji} ${formatStatName(key)}: ${value}\n`;
      });
    }
    
    shareText += `\nüåü –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n`;
    shareText += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${userStats.level}\n`;
    shareText += `‚Ä¢ –°—Ç—Ä–∏–∫: ${userStats.currentStreak} –¥–Ω–µ–π\n`;
    shareText += `‚Ä¢ –ò–Ω—ä–µ–∫—Ü–∏–π: ${userStats.totalInjections}\n\n`;
    shareText += `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É —Ç—Ä–µ–∫–∏–Ω–≥—É! @SteroidTrackerBot`;

    return shareText;
  };

  const getStatEmoji = (statKey: string): string => {
    const emojiMap: Record<string, string> = {
      weight_gained: '‚öñÔ∏è',
      strength_increase: 'üí™',
      body_fat_lost: 'üî•',
      weeks_completed: 'üìÖ',
      blood_tests_done: 'ü©∏',
      side_effects: '‚ö†Ô∏è',
      adherence_rate: '‚úÖ'
    };
    return emojiMap[statKey] || 'üìä';
  };

  const formatStatName = (statKey: string): string => {
    const nameMap: Record<string, string> = {
      weight_gained: '–ù–∞–±—Ä–∞–Ω–æ –≤–µ—Å–∞',
      strength_increase: '–†–æ—Å—Ç —Å–∏–ª—ã',
      body_fat_lost: '–ü–æ—Ç–µ—Ä—è–Ω–æ –∂–∏—Ä–∞',
      weeks_completed: '–ù–µ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      blood_tests_done: '–ê–Ω–∞–ª–∏–∑–æ–≤ —Å–¥–∞–Ω–æ',
      side_effects: '–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
      adherence_rate: '–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∞'
    };
    return nameMap[statKey] || statKey;
  };

  const shareToTelegram = async () => {
    setIsSharing(true);
    telegramWebApp.hapticImpact('medium');

    try {
      const shareText = generateShareText();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      telegramWebApp.sendDataToBot({
        action: 'create_share_card',
        content: {
          ...content,
          shareText,
          userStats
        }
      });

      telegramWebApp.hapticNotification('success');
      toast({
        title: "–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º"
      });
    } catch (error) {
      telegramWebApp.hapticNotification('error');
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
        variant: "destructive"
      });
    } finally {
      setIsSharing(false);
    }
  };

  const copyToClipboard = async () => {
    telegramWebApp.hapticImpact('light');
    
    try {
      const shareText = generateShareText();
      await navigator.clipboard.writeText(shareText);
      
      telegramWebApp.hapticNotification('success');
      toast({
        title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
        description: "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç",
        variant: "destructive"
      });
    }
  };

  const shareToStory = () => {
    telegramWebApp.hapticImpact('medium');
    
    telegramWebApp.sendDataToBot({
      action: 'create_story',
      content: {
        ...content,
        userStats,
        template: 'achievement_story'
      }
    });

    toast({
      title: "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞",
      description: "–û–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤ —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ Telegram"
    });
  };

  return (
    <Card className="bg-gradient-to-br from-purple-900/30 to-blue-900/30 border-purple-500/30">
      <CardHeader>
        <CardTitle className="text-white flex items-center justify-between">
          <div className="flex items-center">
            <Share2 className="w-5 h-5 mr-2 text-purple-400" />
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º
          </div>
          <Badge className="bg-purple-500/20 text-purple-300 border-purple-500/30">
            {content.type}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Preview Card */}
        <div className="bg-card-surface border border-gray-700 rounded-xl p-4">
          <div className="flex items-start space-x-3">
            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
              <Trophy className="w-6 h-6 text-white" />
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-white mb-1">{content.title}</h3>
              <p className="text-sm text-gray-300 mb-2">{content.description}</p>
              
              {/* Stats preview */}
              <div className="flex flex-wrap gap-2">
                {Object.entries(content.stats).slice(0, 3).map(([key, value]) => (
                  <Badge key={key} variant="outline" className="text-xs">
                    {getStatEmoji(key)} {value}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="grid grid-cols-2 gap-3">
          <Button
            onClick={shareToTelegram}
            disabled={isSharing}
            className="bg-blue-600 hover:bg-blue-700 text-white"
          >
            <Users className="w-4 h-4 mr-2" />
            {isSharing ? '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...' : '–í —á–∞—Ç/–≥—Ä—É–ø–ø—É'}
          </Button>
          
          <Button
            onClick={shareToStory}
            variant="outline"
            className="border-purple-500/50 text-purple-300 hover:bg-purple-500/10"
          >
            <Camera className="w-4 h-4 mr-2" />
            –í –∏—Å—Ç–æ—Ä–∏—é
          </Button>
        </div>

        <div className="grid grid-cols-2 gap-3">
          <Button
            onClick={copyToClipboard}
            variant="ghost"
            size="sm"
            className="text-gray-300 hover:text-white"
          >
            <Copy className="w-4 h-4 mr-2" />
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          
          <Button
            onClick={() => {
              telegramWebApp.hapticImpact('light');
              telegramWebApp.sendDataToBot({
                action: 'share_external',
                content: generateShareText()
              });
            }}
            variant="ghost"
            size="sm"
            className="text-gray-300 hover:text-white"
          >
            <ExternalLink className="w-4 h-4 mr-2" />
            –î—Ä—É–≥–∏–µ —Å–æ—Ü—Å–µ—Ç–∏
          </Button>
        </div>

        {/* Engagement Stats */}
        <div className="flex items-center justify-between text-sm text-gray-400 pt-2 border-t border-gray-700">
          <div className="flex items-center space-x-4">
            <span className="flex items-center">
              <Heart className="w-4 h-4 mr-1" />
              {Math.floor(Math.random() * 50) + 10}
            </span>
            <span className="flex items-center">
              <MessageCircle className="w-4 h-4 mr-1" />
              {Math.floor(Math.random() * 20) + 3}
            </span>
          </div>
          <span>–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∞–∫—Ü–∏–∏</span>
        </div>
      </CardContent>
    </Card>
  );
}